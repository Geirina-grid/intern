import { Component, OnInit, ViewChild, AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';
import { Router } from '@angular/router';
import { WholeGraphService } from '../whole-graph.service';
import { ConfirmDialogModule, ConfirmationService } from 'primeng/primeng';
import { GraphManageService } from '../graph-manage.service';
import { CrossValidService } from '../cross-valid.service'
import { GraphChartService } from '../graph-chart.service';
import { CvPeComponent } from '../cv-pe/cv-pe.component';
import { CvPquiComponent } from '../cv-pqui/cv-pqui.component';

import * as gvis from 'gvis';
const GraphChart = (<any>gvis).GraphChart;

@Component({
  selector: 'app-cross-valid',
  templateUrl: './cross-valid.component.html',
  styleUrls: ['./cross-valid.component.css'],
  providers: [CrossValidService]
})
export class CrossValidComponent implements OnInit, AfterViewInit {
  @ViewChild(CvPeComponent) private cvPeComponent: CvPeComponent;
  @ViewChild(CvPquiComponent) private cvPquiComponent: CvPquiComponent;
  public chart: any;
  public line1: any;
  sdate: Date;
  edate: Date;
  defaultDates = new Date('01/01/2013');
  defaultDatee = new Date('5/31/2013');
  selectedmeter: number;
  selectedphase: any;
  meters: any;
  phases: any;
  stats = [];
  private graph;

  constructor(
    private router: Router,
    private wholeGraphService: WholeGraphService,
    private graphManageService: GraphManageService,
    private confirmationService: ConfirmationService,
    private crossvalid: CrossValidService
  ) {
    this.sdate = this.defaultDates;
    this.edate = this.defaultDatee;
    this.selectedmeter = 49;
    this.meters = [];
    let ids = [];
    this.wholeGraphService.getGraph()
    .then(graph=>{
      graph.forEach(elem =>{
        ids.push(Number(elem.v_id));
      })
      ids.sort((n1,n2)=>n1-n2);
      ids.forEach(elem=>{
        this.meters.push({label:elem, value:elem})
      })
    })
  }
  ngOnInit() {
  }
  ngAfterViewInit(): void {
    // this.chart = new GraphChart({
    //   render: {
    //     container: this.container1.nativeElement,
    //     assetsUrlBase: './assets/gvis'
    //   },
    //   style: {
    //     node: [
    //       {
    //         condition: (node, chart) => {
    //           return node.attrs.PdA != 0 && node.attrs.PdB == 0 && node.attrs.PdC == 0;
    //         },
    //         style: {
    //           fillColor: '#FF0000' //red A
    //         }
    //       },
    //       {
    //         condition: (node, chart) => {
    //           return node.attrs.PdA == 0 && node.attrs.PdB != 0 && node.attrs.PdC == 0;
    //         },
    //         style: {
    //           fillColor: '#0000FF' //blue B
    //         }
    //       },
    //       {
    //         condition: (node, chart) => {
    //           return node.attrs.PdA == 0 && node.attrs.PdB == 0 && node.attrs.PdC != 0;
    //         },
    //         style: {
    //           fillColor: '#00FF00' //green C
    //         }
    //       },
    //       {
    //         condition: (node, chart) => {
    //           return node.attrs.PdA != 0 && node.attrs.PdB != 0 && node.attrs.PdC == 0;
    //         },
    //         style: {
    //           fillColor: '#FF00FF' //AB
    //         }
    //       },
    //       {
    //         condition: (node, chart) => {
    //           return node.attrs.PdA != 0 && node.attrs.PdB == 0 && node.attrs.PdC != 0;
    //         },
    //         style: {
    //           fillColor: '#FFFF00' //AC
    //         }
    //       },
    //       {
    //         condition: (node, chart) => {
    //           return node.attrs.PdA == 0 && node.attrs.PdB != 0 && node.attrs.PdC != 0;
    //         },
    //         style: {
    //           fillColor: '00FFFF' //BC
    //         }
    //       },
    //       {
    //         condition: (node, chart) => {
    //           return node.attrs.PdA != 0 && node.attrs.PdB != 0 && node.attrs.PdC != 0;
    //         },
    //         style: {
    //           fillColor: '#808080' //ABC
    //         }
    //       }

    //     ],
    //     link: [
    //       {
    //         condition: (link, chart) => {
    //           return link.attrs.Config == "1";
    //         },
    //         style: {
    //           fillColor: '#808080',
    //           radius: 30
    //         }
    //       },

    //       {
    //         condition: (link, chart) => {
    //           return link.attrs.Config == "2";
    //         },
    //         style: {
    //           fillColor: '#808080',
    //           radius: 30
    //         }
    //       },
    //       {
    //         condition: (link, chart) => {
    //           return link.attrs.Config == "3";
    //         },
    //         style: {
    //           fillColor: '#808080',
    //           radius: 30
    //         }
    //       },
    //       {
    //         condition: (link, chart) => {
    //           return link.attrs.Config == "4";
    //         },
    //         style: {
    //           fillColor: '#808080',
    //           radius: 30
    //         }
    //       },
    //       {
    //         condition: (link, chart) => {
    //           return link.attrs.Config == "5";
    //         },
    //         style: {
    //           fillColor: '#808080',
    //           radius: 30
    //         }
    //       },
    //       {
    //         condition: (link, chart) => {
    //           return link.attrs.Config == "6";
    //         },
    //         style: {
    //           fillColor: '#808080',
    //           radius: 30
    //         }
    //       },
    //       {
    //         condition: (link, chart) => {
    //           return link.attrs.Config == "7"; //AC
    //         },
    //         style: {
    //           fillColor: '#FFFF00',
    //           radius: 20
    //         }
    //       },
    //       {
    //         condition: (link, chart) => {
    //           return link.attrs.Config == "8"; //AB
    //         },
    //         style: {
    //           fillColor: '#FF00FF',
    //           radius: 20
    //         }
    //       },


    //       {
    //         condition: (link, chart) => {
    //           return link.attrs.Config == "9"; //A red
    //         },
    //         style: {
    //           fillColor: '#FF0000',
    //           radius: 10
    //         }
    //       },

    //       {
    //         condition: (link, chart) => {
    //           return link.attrs.Config == "10"; //B blue
    //         },
    //         style: {
    //           fillColor: '#0000FF',
    //           radius: 10
    //         }
    //       },
    //       {
    //         condition: (link, chart) => {
    //           return link.attrs.Config == "11"; //C green
    //         },
    //         style: {
    //           fillColor: '#00FF00',
    //           radius: 10
    //         }
    //       },
    //       {
    //         condition: (link, chart) => {
    //           return link.attrs.Config == "12";
    //         },
    //         style: {
    //           fillColor: '#808080',
    //           radius: 30
    //         }
    //       },
    //     ]
    //   }
    // });
    // this.chart.on('onClick', (item) => {
    //   // Do something here. event call back.
    //   // Example:
    //   if (item.isNode) {
    //     // console.log(item);
    //     this.selectedmeter=item.exID;
    //   } else if (item.isLink) {
    //     console.log(`Link ${item.id} is clicked.`);
    //   }
    // })
    // this.wholeGraphService.getGraph()
    // .then(graph => {
    //   this.graph = graph;
    //   console.log(this.graph);
    //   this.chart
    //     .addData(this.graph, 'gsql');
    //   // this.treeLayout();
    //   if (this.chart.getNodes()[0].attrs.pos_x === 0) {
    //     this.treeLayout();
    //   } else {
    //     this.staticLayout();
    //   }
    //   this.chart.update();
    // });  
    (<any>window).cvpe = this.cvPeComponent;
    (<any>window).cvpq = this.cvPquiComponent;
  }
  treeLayout(): void {
    // add root node
    console.log('tree');
    this.chart.addRoot('bus_D', '150')
      .runLayout('tree');
  }
  staticLayout(): void {
    this.chart.getNodes().forEach(n => {
      n.x = n.attrs.pos_x;
      n.y = n.attrs.pos_y;
    });
    this.chart.runLayout('static');
  }
  onTabChange(e) {
    console.log(e.index);
    if (e.index==0){
        console.log("plotpe");
        this.cvPeComponent.plotpe_reload(this.selectedmeter,this.sdate,this.edate);
    }
    else{
        console.log("plotpqui");
        this.cvPquiComponent.plotpqui_load(this.selectedmeter,this.sdate,this.edate);
    }
  }
}
